generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== ENUMS ==========

enum Gender {
  male
  female
  other
}

enum UserType {
  Admin
  User
}

enum Preference {
  male
  female
  kid
  unisex
}

enum OrderStatus {
  Pending
  Shipped
  Delivered
  Cancelled
}

enum PaymentStatus {
  Pending
  Paid
  Failed
  Refunded
}

// ========== MODELS ==========

// User model
model User {
  id          Int              @id @default(autoincrement()) @map("user_id")
  email       String           @unique
  password    String
  description UserDescription?
  carts       Cart[]
  orders      Order[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("users")
}

// User Description model
model UserDescription {
  id         Int       @id @default(autoincrement())
  firstName  String    @map("first_name")
  lastName   String?   @map("last_name")
  address    String
  gender     Gender?
  mobileNo   String    @map("mobile_no") // Using String to allow leading zeros, enforce length in app logic
  userType   UserType  @default(User) @map("user_type")
  userId     Int       @unique @map("user_id")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@map("user_descriptions")
}

// Category model
model Category {
  id           Int        @id @default(autoincrement()) @map("category_id")
  categoryName String     @map("category_name")
  products     Product[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("categories")
}

// Product model
model Product {
  id           Int         @id @default(autoincrement()) @map("product_id")
  productName  String      @map("product_name")
  description  String
  thumbnail    String
  images       String[]
  price        Float
  stock        Int
  brand        String
  preferences  Preference
  categoryId   Int         @map("category_id")
  category     Category    @relation(fields: [categoryId], references: [id])
  carts        Cart[]
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([categoryId])
  @@map("products")
}

// Cart model
model Cart {
  id         Int      @id @default(autoincrement()) @map("cart_id")
  userId     Int      @map("user_id")
  productId  Int      @map("product_id")
  quantity   Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("carts")
}

// Order model
model Order {
  id              Int           @id @default(autoincrement()) @map("order_id")
  userId          Int           @map("user_id")
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderDate       DateTime      @map("order_date") @default(now())
  status          OrderStatus
  shippingAddress String        @map("shipping_address")
  totalAmount     Float         @map("total_amount")
  paymentStatus   PaymentStatus @map("payment_status")
  payment         Payment?
  orderItems      OrderItem[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@map("orders")
}

// Order Item model
model OrderItem {
  id              Int      @id @default(autoincrement()) @map("order_item_id")
  orderId         Int      @map("order_id")
  productId       Int      @map("product_id")
  quantity        Int
  priceAtPurchase Float    @map("price_at_purchase")
  discount        Float
  subtotal        Float
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

// Payment model
model Payment {
  id        Int           @id @default(autoincrement()) @map("payment_id")
  orderId   Int           @unique @map("order_id")
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  method    String
  amount    Float
  status    PaymentStatus
  paidAt    DateTime?     @map("paid_at")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([orderId])
  @@map("payments")
}